/* Generated by dbus-binding-tool; do not edit! */

#include <glib.h>
#include <dbus/dbus-glib.h>

G_BEGIN_DECLS

#ifndef _DBUS_GLIB_ASYNC_DATA_FREE
#define _DBUS_GLIB_ASYNC_DATA_FREE
static
#ifdef G_HAVE_INLINE
inline
#endif
void
_dbus_glib_async_data_free (gpointer stuff)
{
	g_slice_free (DBusGAsyncData, stuff);
}
#endif

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_org_freedesktop_Tracker_Files
#define DBUS_GLIB_CLIENT_WRAPPERS_org_freedesktop_Tracker_Files

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_Tracker_Files_exist (DBusGProxy *proxy, const char * IN_uri, const gboolean IN_auto_create, gboolean* OUT_result, GError **error)

{
  return dbus_g_proxy_call (proxy, "Exist", error, G_TYPE_STRING, IN_uri, G_TYPE_BOOLEAN, IN_auto_create, G_TYPE_INVALID, G_TYPE_BOOLEAN, OUT_result, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_Tracker_Files_exist_reply) (DBusGProxy *proxy, gboolean OUT_result, GError *error, gpointer userdata);

static void
org_freedesktop_Tracker_Files_exist_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gboolean OUT_result;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_BOOLEAN, &OUT_result, G_TYPE_INVALID);
  (*(org_freedesktop_Tracker_Files_exist_reply)data->cb) (proxy, OUT_result, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_Tracker_Files_exist_async (DBusGProxy *proxy, const char * IN_uri, const gboolean IN_auto_create, org_freedesktop_Tracker_Files_exist_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Exist", org_freedesktop_Tracker_Files_exist_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_uri, G_TYPE_BOOLEAN, IN_auto_create, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_Tracker_Files_create (DBusGProxy *proxy, const char * IN_uri, const gboolean IN_is_directory, const char * IN_mime, const gint IN_size, const gint IN_mtime, GError **error)

{
  return dbus_g_proxy_call (proxy, "Create", error, G_TYPE_STRING, IN_uri, G_TYPE_BOOLEAN, IN_is_directory, G_TYPE_STRING, IN_mime, G_TYPE_INT, IN_size, G_TYPE_INT, IN_mtime, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_Tracker_Files_create_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_freedesktop_Tracker_Files_create_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_freedesktop_Tracker_Files_create_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_Tracker_Files_create_async (DBusGProxy *proxy, const char * IN_uri, const gboolean IN_is_directory, const char * IN_mime, const gint IN_size, const gint IN_mtime, org_freedesktop_Tracker_Files_create_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Create", org_freedesktop_Tracker_Files_create_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_uri, G_TYPE_BOOLEAN, IN_is_directory, G_TYPE_STRING, IN_mime, G_TYPE_INT, IN_size, G_TYPE_INT, IN_mtime, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_Tracker_Files_delete (DBusGProxy *proxy, const char * IN_uri, GError **error)

{
  return dbus_g_proxy_call (proxy, "Delete", error, G_TYPE_STRING, IN_uri, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_Tracker_Files_delete_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_freedesktop_Tracker_Files_delete_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_freedesktop_Tracker_Files_delete_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_Tracker_Files_delete_async (DBusGProxy *proxy, const char * IN_uri, org_freedesktop_Tracker_Files_delete_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Delete", org_freedesktop_Tracker_Files_delete_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_uri, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_Tracker_Files_get_service_type (DBusGProxy *proxy, const char * IN_uri, char ** OUT_service_type, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetServiceType", error, G_TYPE_STRING, IN_uri, G_TYPE_INVALID, G_TYPE_STRING, OUT_service_type, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_Tracker_Files_get_service_type_reply) (DBusGProxy *proxy, char * OUT_service_type, GError *error, gpointer userdata);

static void
org_freedesktop_Tracker_Files_get_service_type_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char * OUT_service_type;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRING, &OUT_service_type, G_TYPE_INVALID);
  (*(org_freedesktop_Tracker_Files_get_service_type_reply)data->cb) (proxy, OUT_service_type, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_Tracker_Files_get_service_type_async (DBusGProxy *proxy, const char * IN_uri, org_freedesktop_Tracker_Files_get_service_type_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetServiceType", org_freedesktop_Tracker_Files_get_service_type_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_uri, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_Tracker_Files_get_text_contents (DBusGProxy *proxy, const char * IN_uri, const gint IN_offset, const gint IN_max_length, char ** OUT_content, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetTextContents", error, G_TYPE_STRING, IN_uri, G_TYPE_INT, IN_offset, G_TYPE_INT, IN_max_length, G_TYPE_INVALID, G_TYPE_STRING, OUT_content, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_Tracker_Files_get_text_contents_reply) (DBusGProxy *proxy, char * OUT_content, GError *error, gpointer userdata);

static void
org_freedesktop_Tracker_Files_get_text_contents_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char * OUT_content;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRING, &OUT_content, G_TYPE_INVALID);
  (*(org_freedesktop_Tracker_Files_get_text_contents_reply)data->cb) (proxy, OUT_content, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_Tracker_Files_get_text_contents_async (DBusGProxy *proxy, const char * IN_uri, const gint IN_offset, const gint IN_max_length, org_freedesktop_Tracker_Files_get_text_contents_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetTextContents", org_freedesktop_Tracker_Files_get_text_contents_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_uri, G_TYPE_INT, IN_offset, G_TYPE_INT, IN_max_length, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_Tracker_Files_search_text_contents (DBusGProxy *proxy, const char * IN_uri, const char * IN_text, const gint IN_length, char ** OUT_result, GError **error)

{
  return dbus_g_proxy_call (proxy, "SearchTextContents", error, G_TYPE_STRING, IN_uri, G_TYPE_STRING, IN_text, G_TYPE_INT, IN_length, G_TYPE_INVALID, G_TYPE_STRING, OUT_result, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_Tracker_Files_search_text_contents_reply) (DBusGProxy *proxy, char * OUT_result, GError *error, gpointer userdata);

static void
org_freedesktop_Tracker_Files_search_text_contents_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char * OUT_result;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRING, &OUT_result, G_TYPE_INVALID);
  (*(org_freedesktop_Tracker_Files_search_text_contents_reply)data->cb) (proxy, OUT_result, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_Tracker_Files_search_text_contents_async (DBusGProxy *proxy, const char * IN_uri, const char * IN_text, const gint IN_length, org_freedesktop_Tracker_Files_search_text_contents_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "SearchTextContents", org_freedesktop_Tracker_Files_search_text_contents_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_uri, G_TYPE_STRING, IN_text, G_TYPE_INT, IN_length, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_Tracker_Files_get_by_service_type (DBusGProxy *proxy, const gint IN_live_query_id, const char * IN_file_service, const gint IN_offset, const gint IN_max_hits, char *** OUT_result, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetByServiceType", error, G_TYPE_INT, IN_live_query_id, G_TYPE_STRING, IN_file_service, G_TYPE_INT, IN_offset, G_TYPE_INT, IN_max_hits, G_TYPE_INVALID, G_TYPE_STRV, OUT_result, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_Tracker_Files_get_by_service_type_reply) (DBusGProxy *proxy, char * *OUT_result, GError *error, gpointer userdata);

static void
org_freedesktop_Tracker_Files_get_by_service_type_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char ** OUT_result;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRV, &OUT_result, G_TYPE_INVALID);
  (*(org_freedesktop_Tracker_Files_get_by_service_type_reply)data->cb) (proxy, OUT_result, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_Tracker_Files_get_by_service_type_async (DBusGProxy *proxy, const gint IN_live_query_id, const char * IN_file_service, const gint IN_offset, const gint IN_max_hits, org_freedesktop_Tracker_Files_get_by_service_type_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetByServiceType", org_freedesktop_Tracker_Files_get_by_service_type_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INT, IN_live_query_id, G_TYPE_STRING, IN_file_service, G_TYPE_INT, IN_offset, G_TYPE_INT, IN_max_hits, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_Tracker_Files_get_by_mime_type (DBusGProxy *proxy, const gint IN_live_query_id, const char ** IN_mime_types, const gint IN_offset, const gint IN_max_hits, char *** OUT_result, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetByMimeType", error, G_TYPE_INT, IN_live_query_id, G_TYPE_STRV, IN_mime_types, G_TYPE_INT, IN_offset, G_TYPE_INT, IN_max_hits, G_TYPE_INVALID, G_TYPE_STRV, OUT_result, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_Tracker_Files_get_by_mime_type_reply) (DBusGProxy *proxy, char * *OUT_result, GError *error, gpointer userdata);

static void
org_freedesktop_Tracker_Files_get_by_mime_type_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char ** OUT_result;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRV, &OUT_result, G_TYPE_INVALID);
  (*(org_freedesktop_Tracker_Files_get_by_mime_type_reply)data->cb) (proxy, OUT_result, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_Tracker_Files_get_by_mime_type_async (DBusGProxy *proxy, const gint IN_live_query_id, const char ** IN_mime_types, const gint IN_offset, const gint IN_max_hits, org_freedesktop_Tracker_Files_get_by_mime_type_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetByMimeType", org_freedesktop_Tracker_Files_get_by_mime_type_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INT, IN_live_query_id, G_TYPE_STRV, IN_mime_types, G_TYPE_INT, IN_offset, G_TYPE_INT, IN_max_hits, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_Tracker_Files_get_by_mime_type_vfs (DBusGProxy *proxy, const gint IN_live_query_id, const char ** IN_mime_types, const gint IN_offset, const gint IN_max_hits, char *** OUT_result, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetByMimeTypeVfs", error, G_TYPE_INT, IN_live_query_id, G_TYPE_STRV, IN_mime_types, G_TYPE_INT, IN_offset, G_TYPE_INT, IN_max_hits, G_TYPE_INVALID, G_TYPE_STRV, OUT_result, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_Tracker_Files_get_by_mime_type_vfs_reply) (DBusGProxy *proxy, char * *OUT_result, GError *error, gpointer userdata);

static void
org_freedesktop_Tracker_Files_get_by_mime_type_vfs_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char ** OUT_result;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRV, &OUT_result, G_TYPE_INVALID);
  (*(org_freedesktop_Tracker_Files_get_by_mime_type_vfs_reply)data->cb) (proxy, OUT_result, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_Tracker_Files_get_by_mime_type_vfs_async (DBusGProxy *proxy, const gint IN_live_query_id, const char ** IN_mime_types, const gint IN_offset, const gint IN_max_hits, org_freedesktop_Tracker_Files_get_by_mime_type_vfs_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetByMimeTypeVfs", org_freedesktop_Tracker_Files_get_by_mime_type_vfs_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INT, IN_live_query_id, G_TYPE_STRV, IN_mime_types, G_TYPE_INT, IN_offset, G_TYPE_INT, IN_max_hits, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_Tracker_Files_get_mtime (DBusGProxy *proxy, const char * IN_uri, gint* OUT_result, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetMTime", error, G_TYPE_STRING, IN_uri, G_TYPE_INVALID, G_TYPE_INT, OUT_result, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_Tracker_Files_get_mtime_reply) (DBusGProxy *proxy, gint OUT_result, GError *error, gpointer userdata);

static void
org_freedesktop_Tracker_Files_get_mtime_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gint OUT_result;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INT, &OUT_result, G_TYPE_INVALID);
  (*(org_freedesktop_Tracker_Files_get_mtime_reply)data->cb) (proxy, OUT_result, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_Tracker_Files_get_mtime_async (DBusGProxy *proxy, const char * IN_uri, org_freedesktop_Tracker_Files_get_mtime_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetMTime", org_freedesktop_Tracker_Files_get_mtime_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_uri, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_Tracker_Files_get_metadata_for_files_in_folder (DBusGProxy *proxy, const gint IN_live_query_id, const char * IN_uri, const char ** IN_fields, GPtrArray** OUT_values, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetMetadataForFilesInFolder", error, G_TYPE_INT, IN_live_query_id, G_TYPE_STRING, IN_uri, G_TYPE_STRV, IN_fields, G_TYPE_INVALID, dbus_g_type_get_collection ("GPtrArray", G_TYPE_STRV), OUT_values, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_Tracker_Files_get_metadata_for_files_in_folder_reply) (DBusGProxy *proxy, GPtrArray *OUT_values, GError *error, gpointer userdata);

static void
org_freedesktop_Tracker_Files_get_metadata_for_files_in_folder_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  GPtrArray* OUT_values;
  dbus_g_proxy_end_call (proxy, call, &error, dbus_g_type_get_collection ("GPtrArray", G_TYPE_STRV), &OUT_values, G_TYPE_INVALID);
  (*(org_freedesktop_Tracker_Files_get_metadata_for_files_in_folder_reply)data->cb) (proxy, OUT_values, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_Tracker_Files_get_metadata_for_files_in_folder_async (DBusGProxy *proxy, const gint IN_live_query_id, const char * IN_uri, const char ** IN_fields, org_freedesktop_Tracker_Files_get_metadata_for_files_in_folder_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetMetadataForFilesInFolder", org_freedesktop_Tracker_Files_get_metadata_for_files_in_folder_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INT, IN_live_query_id, G_TYPE_STRING, IN_uri, G_TYPE_STRV, IN_fields, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_Tracker_Files_search_by_text_and_mime (DBusGProxy *proxy, const char * IN_text, const char ** IN_mimes, char *** OUT_result, GError **error)

{
  return dbus_g_proxy_call (proxy, "SearchByTextAndMime", error, G_TYPE_STRING, IN_text, G_TYPE_STRV, IN_mimes, G_TYPE_INVALID, G_TYPE_STRV, OUT_result, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_Tracker_Files_search_by_text_and_mime_reply) (DBusGProxy *proxy, char * *OUT_result, GError *error, gpointer userdata);

static void
org_freedesktop_Tracker_Files_search_by_text_and_mime_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char ** OUT_result;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRV, &OUT_result, G_TYPE_INVALID);
  (*(org_freedesktop_Tracker_Files_search_by_text_and_mime_reply)data->cb) (proxy, OUT_result, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_Tracker_Files_search_by_text_and_mime_async (DBusGProxy *proxy, const char * IN_text, const char ** IN_mimes, org_freedesktop_Tracker_Files_search_by_text_and_mime_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "SearchByTextAndMime", org_freedesktop_Tracker_Files_search_by_text_and_mime_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_text, G_TYPE_STRV, IN_mimes, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_Tracker_Files_search_by_text_and_location (DBusGProxy *proxy, const char * IN_text, const char * IN_location, char *** OUT_result, GError **error)

{
  return dbus_g_proxy_call (proxy, "SearchByTextAndLocation", error, G_TYPE_STRING, IN_text, G_TYPE_STRING, IN_location, G_TYPE_INVALID, G_TYPE_STRV, OUT_result, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_Tracker_Files_search_by_text_and_location_reply) (DBusGProxy *proxy, char * *OUT_result, GError *error, gpointer userdata);

static void
org_freedesktop_Tracker_Files_search_by_text_and_location_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char ** OUT_result;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRV, &OUT_result, G_TYPE_INVALID);
  (*(org_freedesktop_Tracker_Files_search_by_text_and_location_reply)data->cb) (proxy, OUT_result, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_Tracker_Files_search_by_text_and_location_async (DBusGProxy *proxy, const char * IN_text, const char * IN_location, org_freedesktop_Tracker_Files_search_by_text_and_location_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "SearchByTextAndLocation", org_freedesktop_Tracker_Files_search_by_text_and_location_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_text, G_TYPE_STRING, IN_location, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_Tracker_Files_search_by_text_and_mime_and_location (DBusGProxy *proxy, const char * IN_text, const char ** IN_mimes, const char * IN_location, char *** OUT_result, GError **error)

{
  return dbus_g_proxy_call (proxy, "SearchByTextAndMimeAndLocation", error, G_TYPE_STRING, IN_text, G_TYPE_STRV, IN_mimes, G_TYPE_STRING, IN_location, G_TYPE_INVALID, G_TYPE_STRV, OUT_result, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_Tracker_Files_search_by_text_and_mime_and_location_reply) (DBusGProxy *proxy, char * *OUT_result, GError *error, gpointer userdata);

static void
org_freedesktop_Tracker_Files_search_by_text_and_mime_and_location_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char ** OUT_result;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRV, &OUT_result, G_TYPE_INVALID);
  (*(org_freedesktop_Tracker_Files_search_by_text_and_mime_and_location_reply)data->cb) (proxy, OUT_result, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_Tracker_Files_search_by_text_and_mime_and_location_async (DBusGProxy *proxy, const char * IN_text, const char ** IN_mimes, const char * IN_location, org_freedesktop_Tracker_Files_search_by_text_and_mime_and_location_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "SearchByTextAndMimeAndLocation", org_freedesktop_Tracker_Files_search_by_text_and_mime_and_location_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_text, G_TYPE_STRV, IN_mimes, G_TYPE_STRING, IN_location, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_org_freedesktop_Tracker_Files */

G_END_DECLS
