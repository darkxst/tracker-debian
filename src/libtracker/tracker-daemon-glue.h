/* Generated by dbus-binding-tool; do not edit! */

#include <glib.h>
#include <dbus/dbus-glib.h>

G_BEGIN_DECLS

#ifndef _DBUS_GLIB_ASYNC_DATA_FREE
#define _DBUS_GLIB_ASYNC_DATA_FREE
static
#ifdef G_HAVE_INLINE
inline
#endif
void
_dbus_glib_async_data_free (gpointer stuff)
{
	g_slice_free (DBusGAsyncData, stuff);
}
#endif

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_org_freedesktop_Tracker
#define DBUS_GLIB_CLIENT_WRAPPERS_org_freedesktop_Tracker

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_Tracker_get_version (DBusGProxy *proxy, gint* OUT_version, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetVersion", error, G_TYPE_INVALID, G_TYPE_INT, OUT_version, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_Tracker_get_version_reply) (DBusGProxy *proxy, gint OUT_version, GError *error, gpointer userdata);

static void
org_freedesktop_Tracker_get_version_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gint OUT_version;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INT, &OUT_version, G_TYPE_INVALID);
  (*(org_freedesktop_Tracker_get_version_reply)data->cb) (proxy, OUT_version, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_Tracker_get_version_async (DBusGProxy *proxy, org_freedesktop_Tracker_get_version_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetVersion", org_freedesktop_Tracker_get_version_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_Tracker_get_status (DBusGProxy *proxy, char ** OUT_status, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetStatus", error, G_TYPE_INVALID, G_TYPE_STRING, OUT_status, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_Tracker_get_status_reply) (DBusGProxy *proxy, char * OUT_status, GError *error, gpointer userdata);

static void
org_freedesktop_Tracker_get_status_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char * OUT_status;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRING, &OUT_status, G_TYPE_INVALID);
  (*(org_freedesktop_Tracker_get_status_reply)data->cb) (proxy, OUT_status, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_Tracker_get_status_async (DBusGProxy *proxy, org_freedesktop_Tracker_get_status_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetStatus", org_freedesktop_Tracker_get_status_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_Tracker_get_services (DBusGProxy *proxy, const gboolean IN_main_services_only, GHashTable** OUT_result, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetServices", error, G_TYPE_BOOLEAN, IN_main_services_only, G_TYPE_INVALID, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), OUT_result, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_Tracker_get_services_reply) (DBusGProxy *proxy, GHashTable *OUT_result, GError *error, gpointer userdata);

static void
org_freedesktop_Tracker_get_services_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  GHashTable* OUT_result;
  dbus_g_proxy_end_call (proxy, call, &error, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), &OUT_result, G_TYPE_INVALID);
  (*(org_freedesktop_Tracker_get_services_reply)data->cb) (proxy, OUT_result, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_Tracker_get_services_async (DBusGProxy *proxy, const gboolean IN_main_services_only, org_freedesktop_Tracker_get_services_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetServices", org_freedesktop_Tracker_get_services_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_BOOLEAN, IN_main_services_only, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_Tracker_get_stats (DBusGProxy *proxy, GPtrArray** OUT_service_stats, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetStats", error, G_TYPE_INVALID, dbus_g_type_get_collection ("GPtrArray", G_TYPE_STRV), OUT_service_stats, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_Tracker_get_stats_reply) (DBusGProxy *proxy, GPtrArray *OUT_service_stats, GError *error, gpointer userdata);

static void
org_freedesktop_Tracker_get_stats_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  GPtrArray* OUT_service_stats;
  dbus_g_proxy_end_call (proxy, call, &error, dbus_g_type_get_collection ("GPtrArray", G_TYPE_STRV), &OUT_service_stats, G_TYPE_INVALID);
  (*(org_freedesktop_Tracker_get_stats_reply)data->cb) (proxy, OUT_service_stats, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_Tracker_get_stats_async (DBusGProxy *proxy, org_freedesktop_Tracker_get_stats_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetStats", org_freedesktop_Tracker_get_stats_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_Tracker_set_bool_option (DBusGProxy *proxy, const char * IN_option, const gboolean IN_value, GError **error)

{
  return dbus_g_proxy_call (proxy, "SetBoolOption", error, G_TYPE_STRING, IN_option, G_TYPE_BOOLEAN, IN_value, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_Tracker_set_bool_option_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_freedesktop_Tracker_set_bool_option_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_freedesktop_Tracker_set_bool_option_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_Tracker_set_bool_option_async (DBusGProxy *proxy, const char * IN_option, const gboolean IN_value, org_freedesktop_Tracker_set_bool_option_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "SetBoolOption", org_freedesktop_Tracker_set_bool_option_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_option, G_TYPE_BOOLEAN, IN_value, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_Tracker_set_int_option (DBusGProxy *proxy, const char * IN_option, const gint IN_value, GError **error)

{
  return dbus_g_proxy_call (proxy, "SetIntOption", error, G_TYPE_STRING, IN_option, G_TYPE_INT, IN_value, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_Tracker_set_int_option_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_freedesktop_Tracker_set_int_option_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_freedesktop_Tracker_set_int_option_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_Tracker_set_int_option_async (DBusGProxy *proxy, const char * IN_option, const gint IN_value, org_freedesktop_Tracker_set_int_option_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "SetIntOption", org_freedesktop_Tracker_set_int_option_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_option, G_TYPE_INT, IN_value, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_Tracker_shutdown (DBusGProxy *proxy, const gboolean IN_reindex, GError **error)

{
  return dbus_g_proxy_call (proxy, "Shutdown", error, G_TYPE_BOOLEAN, IN_reindex, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_Tracker_shutdown_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_freedesktop_Tracker_shutdown_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_freedesktop_Tracker_shutdown_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_Tracker_shutdown_async (DBusGProxy *proxy, const gboolean IN_reindex, org_freedesktop_Tracker_shutdown_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Shutdown", org_freedesktop_Tracker_shutdown_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_BOOLEAN, IN_reindex, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_Tracker_prompt_index_signals (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "PromptIndexSignals", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_Tracker_prompt_index_signals_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_freedesktop_Tracker_prompt_index_signals_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_freedesktop_Tracker_prompt_index_signals_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_Tracker_prompt_index_signals_async (DBusGProxy *proxy, org_freedesktop_Tracker_prompt_index_signals_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "PromptIndexSignals", org_freedesktop_Tracker_prompt_index_signals_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_org_freedesktop_Tracker */

G_END_DECLS
